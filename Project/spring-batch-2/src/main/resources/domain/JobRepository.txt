* JobRepository
	1. 기본 개념
	    * 배치 작업 중의 정보를 저장하는 저장소 역할
	    * Job이 언제 수행되었고, 언제 끝났으며, 몇 번이 실행되었고 실행 결과 등의 배치 작업의 수행과 관련된 모든 meta data를 저장함
	        - JobLauncher, Job, Step 구현체 내부에서 CRUD 기능을 처리함

    2. Method
        - boolean isJobInstanceExists(String jobName, JobParameters jobParameters)
            : JobInstance 가 존재하는지 여부

        - JobExecution createJobExecution(String jobName, JobParameters jobParameters)
            : Job이 실행될 떄 마다 JobExecution 생성

        - JobExecution getLastJobExecution(String jobName, JobParameters jobParameters)
            : 해당 Job의 실행 이력 중 가장 최근의 JobExecution 반환

        - void update(JobExecution jobExecution)
            : Job의 실행정보 업데이트

        - void update(StepExecution stepExecution)
            : Step의 실행정보 업데이트

        - void add(StepExecution stepExecution)
            : 실행 중인 해당 Step의 새로운 stepExecution 저장

        - void updateExecutionContext(StepExecution stepExecution)
            : Step의 공유 데이터 및 상태정보를 담고 있는 ExecutionContext 업데이트

        - void updateExecutionContext(JobExecution jobExecution)
            : Job의 공유 데이터 및 상태정보를 담고 있는 ExecutionContext 업데이트

        - StepExecution getLastStepExecution(JobInstance jobInstance, String stepName)
            : 해당 Step의 실행 이력 중 가장 최근의 StepExecution 반환

    3. JobRepository 설정
        * @EnableBatchProcessing 어노테이션만 선언하면 JobRepository 가 자동으로 빈으로 생성 됨
        * BatchConfigurer 인터페이스를 구현하거나 BasicBatchConfigurer를 상속해서 JobRepository 설정을 커스터마이징 할 수 있다.
            - JDBC 방식으로 설정 : JobRepositoryFactoryBean
                : 내부적으로 AOP 기술을 통해 트랜잭션 처리를 해주고 있음
                : 트랜잭션 isolation 의 기본값은 SERIALIZEBLE로 최고 수주느 다른 레벨(READ_COMMITED, REPEATABLE_READ)로 지정 가능
                : 메타테이블의 Table Prefix를 변경할 수 있음, 기본 값은 BATCH_ 임

            - In Memory 방식으로 설정 - MapJobRepositoryFactoryBean
                : 성능 등의 이유로 도메인 오브젝트를 굳이 데이터베이스에 저장하고 싶지 않을 경우
                : 보통 Test나 프로토타입의 빠른 개발이 필요할 때 사용
